Index: src/main/java/librarymanagement/DashboardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package librarymanagement;\r\n\r\nimport javafx.animation.TranslateTransition;\r\nimport de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;\r\nimport javafx.beans.Observable;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.ImagePattern;\r\nimport javafx.scene.shape.Circle;\r\nimport javafx.stage.FileChooser;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\nimport javafx.util.Duration;\r\nimport javafx.scene.control.Alert.AlertType;\r\n\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class DashboardController implements Initializable {\r\n\r\n    @FXML\r\n    private Button availableBooks_btn;\r\n\r\n    @FXML\r\n    private AnchorPane availableBooks_form;\r\n\r\n    @FXML\r\n    private ImageView availableBooks_imageView;\r\n\r\n    @FXML\r\n    private TableView<availableBooks> availableBooks_tableView;\r\n\r\n    @FXML\r\n    private Label availableBooks_title;\r\n\r\n    @FXML\r\n    private Label issueBook_title;\r\n\r\n    @FXML\r\n    private Circle circle_image;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_author;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_bookType;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_bookTitle;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_publishedDate;\r\n\r\n    @FXML\r\n    private Button edit_btn;\r\n\r\n    @FXML\r\n    private Button issueBooks_btn;\r\n\r\n    @FXML\r\n    private Button returnBooks_btn;\r\n\r\n    @FXML\r\n    private Button save_btn;\r\n\r\n    @FXML\r\n    private Button savedBooks_btn;\r\n\r\n    @FXML\r\n    private Button logout_btn;\r\n\r\n    @FXML\r\n    private Label studentNumber_label;\r\n\r\n    @FXML\r\n    private Button take_btn;\r\n\r\n    @FXML\r\n    private FontAwesomeIcon edit_icon;\r\n\r\n    @FXML\r\n    private Button close;\r\n\r\n    @FXML\r\n    private Button minimize;\r\n\r\n    @FXML\r\n    private Button bars_btn;\r\n\r\n    @FXML\r\n    private Button arrow_btn;\r\n\r\n    @FXML\r\n    private AnchorPane nav_form;\r\n\r\n    @FXML\r\n    private AnchorPane mainCenter_form;\r\n\r\n    @FXML\r\n    private Button halfNav_availableBtn;\r\n\r\n    @FXML\r\n    private AnchorPane halfNav_form;\r\n\r\n    @FXML\r\n    private Button halfNav_returnBtn;\r\n\r\n    @FXML\r\n    private Button halfNav_saveBtn;\r\n\r\n    @FXML\r\n    private Button halfNav_takeBtn;\r\n\r\n    @FXML\r\n    private Circle smallCircle_image;\r\n\r\n    @FXML\r\n    private AnchorPane issue_form;\r\n\r\n    @FXML\r\n    private AnchorPane returnBook_form;\r\n\r\n    @FXML\r\n    private AnchorPane savedBook_form;\r\n\r\n    @FXML\r\n    private Label currentForm_label;\r\n\r\n    @FXML\r\n    private TextField take_BookTitle;\r\n\r\n    @FXML\r\n    private TextField take_FirstName;\r\n\r\n    @FXML\r\n    private ComboBox<?> take_Gender;\r\n\r\n    @FXML\r\n    private Label take_IssuedDate;\r\n\r\n    @FXML\r\n    private TextField take_LastName;\r\n\r\n    @FXML\r\n    private Label take_StudentNumber;\r\n\r\n    @FXML\r\n    private Label take_authorLabel;\r\n\r\n    @FXML\r\n    private Button take_clearBtn;\r\n\r\n    @FXML\r\n    private Label take_dateLabel;\r\n\r\n    @FXML\r\n    private Label take_genreLabel;\r\n\r\n    @FXML\r\n    private ImageView take_imageView;\r\n\r\n    @FXML\r\n    private Button take_takeBtn;\r\n\r\n    @FXML\r\n    private Label take_titleLabel;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_author;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_date;\r\n\r\n    @FXML\r\n    private ImageView return_imageView;\r\n\r\n    @FXML\r\n    private TableView<returnBook> return_tableView;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_title;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_type;\r\n\r\n    @FXML\r\n    private Button return_button;\r\n    @FXML\r\n    private TableColumn<saveBook, String> saveBook_author;\r\n\r\n    @FXML\r\n    private TableColumn<saveBook, String> saveBook_date;\r\n\r\n    @FXML\r\n    private TableColumn<saveBook, String> saveBook_title;\r\n\r\n    @FXML\r\n    private TableColumn<saveBook, String > saveBook_type;\r\n\r\n    @FXML\r\n    private Button unsave_btn;\r\n\r\n    @FXML\r\n    private ImageView save_imageView;\r\n\r\n    @FXML\r\n    private TableView<saveBook> saveBook_tableView;\r\n\r\n    Image image;\r\n\r\n    private Connection connect;\r\n    private PreparedStatement prepare;\r\n    private ResultSet result;\r\n    private Statement statement;\r\n    private String comboBox[] = {\"Male\", \"Female\", \"Others\"};\r\n\r\n    public void gender(){\r\n        List<String> combo = new ArrayList<>();\r\n\r\n        for(String data: comboBox){\r\n            combo.add(data);\r\n        }\r\n\r\n        ObservableList list = FXCollections.observableList(combo);\r\n\r\n        take_Gender.setItems(list);\r\n    }\r\n\r\n    private boolean check_conditions(){\r\n        return true;\r\n    }\r\n\r\n    public void takeBook() throws SQLException {\r\n\r\n        Date date = new Date();\r\n        java.sql.Date sqlDate = new java.sql.Date(date.getTime());\r\n\r\n        String sql = \"INSERT INTO take(`studentNumber`,`firstname`,`lastname`,`gender`,\" +\r\n                \"`bookTitle`,`author`,`bookType`,`image`,`date`,`checkReturn`)\" +\r\n                \" VALUES(?,?,?,?,?,?,?,?,?,?)\";\r\n\r\n        connect = Database.connectDB();\r\n\r\n        try{\r\n\r\n            Alert alert;\r\n\r\n            if(take_FirstName.getText().isEmpty()\r\n                    || take_LastName.getText().isEmpty()\r\n                    || take_Gender.getSelectionModel().isEmpty()){\r\n                alert = new Alert(AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please insert completely all Information!\");\r\n                alert.showAndWait();\r\n            }\r\n//            else if(take_titleLabel.getText().equals(\"Book is not available!\")) {\r\n//                alert = new Alert(AlertType.ERROR);\r\n//                alert.setTitle(\"Program message\");\r\n//                alert.setHeaderText(null);\r\n//                alert.setContentText(\"The selected book is not available. Please select another book.\");\r\n//                alert.showAndWait();\r\n//\r\n//            }\r\n            else\r\n            {\r\n                prepare = connect.prepareStatement(sql);\r\n                prepare.setString(1, take_StudentNumber.getText());\r\n                prepare.setString(2, take_FirstName.getText());\r\n                prepare.setString(3, take_LastName.getText());\r\n                prepare.setString(4, (String)take_Gender.getSelectionModel().getSelectedItem());\r\n                prepare.setString(5, take_titleLabel.getText());\r\n                prepare.setString(6, take_authorLabel.getText());\r\n                prepare.setString(7, take_genreLabel.getText());\r\n                prepare.setString(8, getData.pathImage);\r\n                prepare.setDate(9, sqlDate);\r\n\r\n                String check = \"Not Return\";\r\n\r\n                prepare.setString(10, check);\r\n                prepare.executeUpdate();\r\n\r\n                alert = new Alert(AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Successfully take the book\");\r\n                alert.showAndWait();\r\n\r\n                clearTakeData();\r\n\r\n            }\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        } finally {\r\n            if(result != null)\r\n                result.close();\r\n            if(prepare != null)\r\n                prepare.close();\r\n            if(connect != null)\r\n                connect.close();\r\n        }\r\n    }\r\n\r\n    public void findBook(ActionEvent event) throws SQLException {\r\n\r\n        clearFindData();\r\n\r\n        String sql = \"SELECT * FROM book WHERE bookTitle = '\" + take_BookTitle.getText() + \"'\";\r\n\r\n        connect = Database.connectDB();\r\n\r\n        try{\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n            boolean check = false;\r\n\r\n            Alert alert;\r\n\r\n            if(take_BookTitle.getText().isEmpty()){\r\n                alert = new Alert(AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book!\");\r\n                alert.showAndWait();\r\n            }else{\r\n                while (result.next()){\r\n                    take_titleLabel.setText(result.getString(\"bookTitle\"));\r\n                    take_authorLabel.setText(result.getString(\"author\"));\r\n                    take_genreLabel.setText(result.getString(\"bookType\"));\r\n                    take_dateLabel.setText(result.getString(\"date\"));\r\n\r\n                    getData.path = result.getString(\"image\");\r\n\r\n                    String uri = \"file:\" + getData.path;\r\n\r\n                    image = new Image(uri, 127,162, false, true);\r\n                    take_imageView.setImage(image);\r\n\r\n                    check = true;\r\n                }\r\n\r\n                if(!check){\r\n                    take_titleLabel.setText(\"Book is not available!\");\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        } finally {\r\n            if(result != null)\r\n                result.close();\r\n            if(prepare != null)\r\n                prepare.close();\r\n            if(connect != null)\r\n                connect.close();\r\n        }\r\n    }\r\n\r\n    public void studentNumberLabel(){\r\n        take_StudentNumber.setText(getData.studentNumber);\r\n    }\r\n\r\n    public void clearTakeData(){\r\n        issueBook_title.setText(\"\");\r\n        take_BookTitle.setText(\"\");\r\n        take_titleLabel.setText(\"\");\r\n        take_authorLabel.setText(\"\");\r\n        take_genreLabel.setText(\"\");\r\n        take_dateLabel.setText(\"\");\r\n        take_imageView.setImage(null);\r\n    }\r\n\r\n    public void clearFindData(){\r\n        take_titleLabel.setText(\"\");\r\n        take_authorLabel.setText(\"\");\r\n        take_genreLabel.setText(\"\");\r\n        take_dateLabel.setText(\"\");\r\n        take_imageView.setImage(null);\r\n    }\r\n\r\n    public void displayDate(){\r\n        SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n        String date = format.format(new Date());\r\n        take_IssuedDate.setText(date);\r\n    }\r\n\r\n    //Return book\r\n\r\n    public ObservableList<returnBook> returnBookData(){\r\n        ObservableList<returnBook> listReturnBook = FXCollections.observableArrayList();\r\n        String checkReturn = \"Not Return\";\r\n        String sql = \"SELECT * FROM take WHERE checkReturn = '\"+ checkReturn +\"' AND studentNumber = '\"+ getData.studentNumber +\"' \";\r\n        Alert alert;\r\n        connect = Database.connectDB();\r\n        try{\r\n            returnBook rBooks;\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n            while (result.next()){\r\n                rBooks = new returnBook(\r\n                        result.getString(\"bookTitle\"),\r\n                        result.getString(\"author\"),\r\n                        result.getString(\"bookType\"),\r\n                        result.getDate(\"date\"),\r\n                        result.getString(\"image\")\r\n\r\n                );\r\n\r\n                listReturnBook.add(rBooks);\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return listReturnBook;\r\n    }\r\n\r\n    public void returnBook(){\r\n        String sql = \"UPDATE take SET checkReturn = 'Returned' WHERE bookTitle = '\"+ getData.takeBookTitle +\"' \";\r\n        connect = Database.connectDB();\r\n\r\n        try{\r\n\r\n            if(return_imageView.getImage() == null){\r\n                Alert alert = new Alert(AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book you want to return!\");\r\n                alert.showAndWait();\r\n            }else{\r\n                statement = connect.createStatement();\r\n                statement.executeUpdate(sql);\r\n                Alert alert = new Alert(AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Return successfully!\");\r\n                alert.showAndWait();\r\n\r\n                showReturnBooks();\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void selectReturnBook(){\r\n        returnBook rBooks = return_tableView.getSelectionModel().getSelectedItem();\r\n        int num = return_tableView.getSelectionModel().getFocusedIndex();\r\n\r\n        if ((num - 1) < -1) {\r\n//            Alert alert = new Alert(AlertType.INFORMATION);\r\n//            alert.setTitle(\"Program message\");\r\n//            alert.setHeaderText(null);\r\n//            alert.setContentText(\"\"+ num +\"\");\r\n//            alert.showAndWait();\r\n            return;\r\n        }\r\n\r\n        getData.takeBookTitle = rBooks.getTitle();\r\n\r\n        getData.path = rBooks.getImage();\r\n\r\n        String uri = \"file:\" + getData.path;\r\n\r\n        image = new Image(uri, 134,171, false, true);\r\n        return_imageView.setImage(image);\r\n\r\n    }\r\n\r\n    private ObservableList<returnBook> returnData;\r\n    public void showReturnBooks(){\r\n        returnData = returnBookData();\r\n\r\n        returnBook_title.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        returnBook_author.setCellValueFactory(new PropertyValueFactory<>(\"author\"));\r\n        returnBook_type.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        returnBook_date.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n\r\n        return_tableView.setItems(returnData);\r\n\r\n    }\r\n    //Save book\r\n\r\n    public  ObservableList<saveBook> saveBookData(){\r\n        ObservableList<saveBook> listSaveData = FXCollections.observableArrayList();\r\n        String sql = \"Select * from save where studentNumber = '\"+ getData.studentNumber +\"' \";\r\n        //int count =0;\r\n        connect = Database.connectDB();\r\n        try {\r\n            saveBook sBooks;\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n            while(result.next()){\r\n                sBooks = new saveBook(result.getString(\"bookTitle\"),result.getString(\"author\"),\r\n                        result.getString(\"bookType\"),result.getString(\"image\"),\r\n                        result.getDate(\"date\"));\r\n                listSaveData.add(sBooks);\r\n                //count ++;\r\n            }\r\n//        Alert alert = new Alert(AlertType.INFORMATION);\r\n//        alert.setTitle(\"Program message\");\r\n//        alert.setHeaderText(null);\r\n//        alert.setContentText(\"\"+ count +\"\");\r\n//        alert.showAndWait();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return listSaveData;\r\n    }\r\n\r\n    private ObservableList<saveBook> sBookList;\r\n    public void showSaveBook(){\r\n        sBookList = saveBookData();\r\n        int count =0;\r\n        saveBook_title.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        saveBook_author.setCellValueFactory(new PropertyValueFactory<>(\"author\"));\r\n        saveBook_type.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        saveBook_date.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n\r\n        saveBook_tableView.setItems(sBookList);\r\n    }\r\n\r\n    public void saveBook(){\r\n        String sql = \"INSERT INTO save(`studentNumber`,`bookTitle`,`author`,`bookType`,`image`,`date`) VALUES(?,?,?,?,?,?)\";\r\n        connect = Database.connectDB();\r\n\r\n        try {\r\n\r\n            Alert alert;\r\n            if(availableBooks_title.getText().isEmpty()){\r\n                alert = new Alert(AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book!\");\r\n                alert.showAndWait();\r\n            }\r\n            else{\r\n                prepare = connect.prepareStatement(sql);\r\n                prepare.setString(1, getData.studentNumber);\r\n                prepare.setString(2, getData.saveTitle);\r\n                prepare.setString(3, getData.saveAuthor);\r\n                prepare.setString(4, getData.saveType);\r\n                prepare.setString(5, getData.saveImg);\r\n                prepare.setDate(6, getData.saveDate);\r\n                prepare.executeUpdate();\r\n\r\n                alert = new Alert(AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Book saved!\");\r\n                alert.showAndWait();\r\n\r\n                showSaveBook();\r\n            }\r\n\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void selectSaveBook(){\r\n        saveBook sBook = saveBook_tableView.getSelectionModel().getSelectedItem();\r\n        int num = saveBook_tableView.getSelectionModel().getFocusedIndex();\r\n\r\n        if ((num - 1) < -1) {\r\n            return;\r\n        }\r\n\r\n        getData.takeBookTitle = sBook.getTitle();\r\n\r\n        getData.path = sBook.getImg();\r\n\r\n        String uri = \"file:\" + getData.path;\r\n\r\n        image = new Image(uri, 108,147, false, true);\r\n        save_imageView.setImage(image);\r\n        getData.saveImg = sBook.getImg();\r\n        getData.saveTitle = sBook.getTitle();\r\n    }\r\n\r\n    public void unsaveBook(){\r\n        String sql = \"Delete from save where bookTitle = '\" + getData.saveTitle + \"' and studentNumber = '\" + getData.studentNumber + \"'\";\r\n\r\n        connect = Database.connectDB();\r\n        try {\r\n            Alert alert;\r\n\r\n            if(save_imageView.getImage() == null){\r\n                alert = new Alert(AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book you want to unsave!\");\r\n                alert.showAndWait();\r\n            }else{\r\n                statement = connect.createStatement();\r\n                statement.executeUpdate(sql);\r\n                alert = new Alert(AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Unsave successfully!\");\r\n                alert.showAndWait();\r\n\r\n                showSaveBook();\r\n                save_imageView.setImage(null);\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public ObservableList<availableBooks> dataList(){\r\n\r\n        ObservableList<availableBooks> listBooks = FXCollections.observableArrayList();\r\n\r\n        String sql = \"SELECT * FROM book\";\r\n\r\n        connect = Database.connectDB();\r\n\r\n        try {\r\n            availableBooks aBooks;\r\n\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n\r\n            while (result.next()){\r\n                aBooks = new availableBooks(\r\n                        result.getString(\"bookTitle\"),\r\n                        result.getString(\"author\"),\r\n                        result.getString(\"bookType\"),\r\n                        result.getString(\"image\"),\r\n                        result.getDate(\"date\"));\r\n                listBooks.add(aBooks);\r\n            }\r\n\r\n        }catch (Exception e){e.printStackTrace();}\r\n        return listBooks;\r\n    }\r\n\r\n    //SHOWING BOOKS DATA\r\n    private ObservableList<availableBooks> listBook;\r\n    public void showAvailableBooks(){\r\n\r\n        listBook = dataList();\r\n\r\n        col_ab_bookTitle.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        col_ab_author.setCellValueFactory(new PropertyValueFactory<>(\"author\"));\r\n        col_ab_bookType.setCellValueFactory(new PropertyValueFactory<>(\"genre\"));\r\n        col_ab_publishedDate.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n\r\n        availableBooks_tableView.setItems(listBook);\r\n    }\r\n\r\n    availableBooks getBookData;\r\n    public void selectAvailableBooks(){\r\n\r\n        availableBooks bookData = availableBooks_tableView.getSelectionModel().getSelectedItem();\r\n\r\n        int num = availableBooks_tableView.getSelectionModel().getFocusedIndex();\r\n\r\n        if ((num - 1) < -1) {\r\n            return;\r\n        }\r\n        getBookData = bookData;\r\n\r\n        availableBooks_title.setText(bookData.getTitle());\r\n\r\n//        THIS IS REQUIRED TO DISPLAY THE IMAGE\r\n//        NOTE! DON'T FORGET THE \"file:\"\r\n        String uri = \"file:\" + bookData.getImage();\r\n\r\n        image = new Image(uri, 134, 171, false, true);\r\n        availableBooks_imageView.setImage(image);\r\n\r\n        getData.takeBookTitle = bookData.getTitle();\r\n        getData.saveTitle = bookData.getTitle();\r\n        getData.saveAuthor = bookData.getAuthor();\r\n        getData.saveType = bookData.getGenre();\r\n        getData.saveImg = bookData.getImage();\r\n        getData.saveDate = (java.sql.Date) bookData.getDate();\r\n    }\r\n\r\n    public void abTakeButton(ActionEvent event){\r\n\r\n        if (event.getSource()== take_btn){\r\n            issue_form.setVisible(true);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Issue Books\");\r\n        }\r\n\r\n        issueBook_title.setText(\" \" +getBookData.getTitle());\r\n        take_titleLabel.setText(getBookData.getTitle());\r\n        take_authorLabel.setText(getBookData.getAuthor());\r\n        take_genreLabel.setText(getBookData.getGenre());\r\n        take_dateLabel.setText(getBookData.getDate().toString());\r\n\r\n        String uri = \"file:\" + getBookData.getImage();\r\n        getData.pathImage = getBookData.getImage();\r\n        image = new Image(uri, 134, 171, false, true);\r\n        take_imageView.setImage(image);\r\n\r\n//        Alert alert;\r\n//        alert = new Alert(AlertType.INFORMATION);\r\n//        alert.setTitle(\"Program message\");\r\n//        alert.setHeaderText(null);\r\n//        alert.setContentText(bookData.getTitle());\r\n//        alert.showAndWait();\r\n\r\n    }\r\n\r\n    public void studentNumber(){\r\n//        WE CAN DISPLAY THE STUDENT NUMBER THAT STUDENT USED\r\n        studentNumber_label.setText(getData.studentNumber);\r\n    }\r\n\r\n    public void hideInsertImage(){\r\n        edit_btn.setVisible(false);\r\n    }\r\n\r\n    public void setUserImage() {\r\n        String rootPath = System.getProperty(\"user.dir\");\r\n        String relativeImagePath = \"/src/main/java/image/logo.png\";\r\n        String absoluteImagePath = rootPath + relativeImagePath;\r\n\r\n        image = new Image(\"file:\" + absoluteImagePath, 130, 87, false, true);\r\n        circle_image.setFill(new ImagePattern(image));\r\n        smallCircle_image.setFill(new ImagePattern(image));\r\n    }\r\n\r\n    public void sideNavButtonDesign(ActionEvent event){\r\n        if (event.getSource() == halfNav_availableBtn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(true);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Available Books\");\r\n        }else if (event.getSource() == halfNav_takeBtn){\r\n\r\n            issue_form.setVisible(true);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Issue Books\");\r\n\r\n        }else if (event.getSource() == halfNav_returnBtn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(true);\r\n\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Return Books\");\r\n            showReturnBooks();\r\n\r\n        }else if (event.getSource() == halfNav_saveBtn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(true);\r\n            returnBook_form.setVisible(false);\r\n\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Saved Books\");\r\n            showSaveBook();\r\n        }\r\n    }\r\n\r\n    public void navButtonDesign(ActionEvent event){\r\n\r\n        if (event.getSource() == availableBooks_btn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(true);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Available Books\");\r\n\r\n        }else if (event.getSource() == issueBooks_btn){\r\n\r\n            issue_form.setVisible(true);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Issue Books\");\r\n\r\n        }else if (event.getSource() == returnBooks_btn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(true);\r\n\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Return Books\");\r\n\r\n            showReturnBooks();\r\n\r\n        }else if (event.getSource() == savedBooks_btn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(true);\r\n            returnBook_form.setVisible(false);\r\n\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Saved Books\");\r\n\r\n            showSaveBook();\r\n        }\r\n    }\r\n\r\n    private double x = 0;\r\n    private double y = 0;\r\n\r\n    public void sliderArrow(){\r\n\r\n        TranslateTransition slide = new TranslateTransition();\r\n\r\n        slide.setDuration(Duration.seconds(.5));\r\n        slide.setNode(nav_form);\r\n        slide.setToX(-263);\r\n\r\n        TranslateTransition slide1 = new TranslateTransition();\r\n\r\n        slide1.setDuration(Duration.seconds(.5));\r\n        slide1.setNode(mainCenter_form);\r\n        slide1.setToX(-263 + 100);\r\n\r\n        TranslateTransition slide2 = new TranslateTransition();\r\n\r\n        slide2.setDuration(Duration.seconds(.5));\r\n        slide2.setNode(halfNav_form);\r\n        slide2.setToX(0);\r\n\r\n\r\n\r\n        slide.setOnFinished((ActionEvent event) -> {\r\n            arrow_btn.setVisible(false);\r\n            bars_btn.setVisible(true);\r\n        });\r\n\r\n        slide2.play();\r\n        slide1.play();\r\n        slide.play();\r\n    }\r\n\r\n    public void sliderBars(){\r\n        TranslateTransition slide = new TranslateTransition();\r\n\r\n        slide.setDuration(Duration.seconds(.5));\r\n        slide.setNode(nav_form);\r\n        slide.setToX(0);\r\n\r\n        TranslateTransition slide1 = new TranslateTransition();\r\n        slide1.setDuration(Duration.seconds(.5));\r\n        slide1.setNode(mainCenter_form);\r\n        slide1.setToX(0);\r\n\r\n        TranslateTransition slide2 = new TranslateTransition();\r\n\r\n        slide2.setDuration(Duration.seconds(.5));\r\n        slide2.setNode(halfNav_form);\r\n        slide2.setToX(-86);\r\n\r\n        slide.setOnFinished((ActionEvent event) -> {\r\n            arrow_btn.setVisible(true);\r\n            bars_btn.setVisible(false);\r\n        });\r\n\r\n        slide2.play();\r\n        slide1.play();\r\n        slide.play();\r\n    }\r\n\r\n    @FXML\r\n    public void logout(ActionEvent event){\r\n        try{\r\n            if(event.getSource() == logout_btn){\r\n                //To SWAP FROM DASHBOARD TO LOGIN FORM\r\n                Parent root = FXMLLoader.load(getClass().getResource(\"FXMLDocument.fxml\"));\r\n\r\n                Stage stage = new Stage();\r\n                Scene scene = new Scene(root);\r\n\r\n                root.setOnMousePressed((MouseEvent e) -> {\r\n\r\n                    x = e.getSceneX();\r\n                    y = e.getSceneY();\r\n\r\n                });\r\n\r\n                root.setOnMouseDragged((MouseEvent e) -> {\r\n                    stage.setX(e.getScreenX() - x);\r\n                    stage.setY(e.getScreenY() - y);\r\n                });\r\n\r\n                stage.initStyle(StageStyle.TRANSPARENT);\r\n\r\n                stage.setScene(scene);\r\n                stage.show();\r\n\r\n                logout_btn.getScene().getWindow().hide();\r\n\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public void exit(){\r\n        System.exit(0);\r\n    }\r\n\r\n    public void minimize(){\r\n        Stage stage = (Stage) minimize.getScene().getWindow();\r\n        stage.setIconified(true);\r\n    }\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        //TO SHOW THE AVAILABLE BOOKS\r\n        showAvailableBooks();\r\n        setUserImage();\r\n        hideInsertImage();\r\n        studentNumber();\r\n        gender();\r\n        studentNumberLabel();\r\n        displayDate();\r\n        try {\r\n            showSaveBook();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try{\r\n            showReturnBooks();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n//    public void insertImage(){\r\n//\r\n//        FileChooser open = new FileChooser();\r\n//        open.setTitle(\"Image file\");\r\n//        open.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Image file\", \"*png\", \"*jpg\"));\r\n//        Stage stage = (Stage) nav_form.getScene().getWindow();\r\n//\r\n//        File file = open.showOpenDialog(stage);\r\n//\r\n//        if(file != null){\r\n//\r\n//            image = new Image(file.toURI().toString(),130,87,false,true);\r\n//            circle_image.setFill(new ImagePattern(image));\r\n//            smallCircle_image.setFill(new ImagePattern(image));\r\n//\r\n//            getData.path = file.getAbsolutePath();\r\n//            System.out.println(getData.path);\r\n//\r\n//            changeProfile();\r\n//        }\r\n//    }\r\n//\r\n//    public void changeProfile(){\r\n//\r\n//        String uri = getData.path;\r\n//        //uri.replace(\"\\\\\",\"\\\\\\\\\");\r\n//        String uri_convert = uri.replace(\"\\\\\",\"/\");\r\n//        String sql = \"Update student set image = '\"+ uri_convert +\"' where studentNumber = '\"+ getData.studentNumber +\"' \";\r\n//        connect = Database.connectDB();\r\n//        try {\r\n//\r\n//            statement = connect.createStatement();\r\n//            statement.executeUpdate(sql);\r\n//\r\n//        }catch (Exception e){\r\n//            e.printStackTrace();\r\n//        }\r\n//    }\r\n//\r\n//    public void showProfile(){\r\n//        String uri = \"file:\" + getData.path;\r\n//        image = new Image(uri, 130, 87, false, true);\r\n//        circle_image.setFill(new ImagePattern(image));\r\n//        smallCircle_image.setFill(new ImagePattern(image));\r\n//    }\r\n\r\n//    public void DesignInsertImage(){\r\n//        circle_image.setOnMouseEntered((MouseEvent event)->{\r\n//            edit_btn.setVisible(true);\r\n//        });\r\n//        circle_image.setOnMouseExited((MouseEvent event)->{\r\n//            edit_btn.setVisible(false);\r\n//        });\r\n//\r\n//        edit_btn.setOnMouseEntered((MouseEvent event)->{\r\n//            edit_btn.setVisible(true);\r\n//            edit_icon.setFill(Color.valueOf(\"#fff\"));\r\n//        });\r\n//        edit_btn.setOnMousePressed((MouseEvent event)->{\r\n//            edit_btn.setVisible(true);\r\n//            edit_icon.setFill(Color.RED);\r\n//        });\r\n//        edit_btn.setOnMouseExited((MouseEvent event)->{\r\n//            edit_btn.setVisible(false);\r\n//        });\r\n//\r\n//\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/librarymanagement/DashboardController.java b/src/main/java/librarymanagement/DashboardController.java
--- a/src/main/java/librarymanagement/DashboardController.java	
+++ b/src/main/java/librarymanagement/DashboardController.java	
@@ -60,6 +60,9 @@
     @FXML
     private Circle circle_image;
 
+    @FXML
+    private TableColumn<availableBooks, Integer> col_ab_BookId;
+
     @FXML
     private TableColumn<availableBooks, String> col_ab_author;
 
@@ -227,6 +230,33 @@
     @FXML
     private TableView<saveBook> saveBook_tableView;
 
+    @FXML
+    private Button addBook_btn;
+
+    @FXML
+    private Button showBook_btn;
+
+    @FXML
+    private TextField addAuthor_label;
+
+    @FXML
+    private ImageView addBookImage_View;
+
+    @FXML
+    private TextField addBookTitle_label;
+
+    @FXML
+    private TextField addBookType_label;
+
+    @FXML
+    private TextField addDate_label;
+
+    @FXML
+    private Button clearAddBook_btn;
+
+    @FXML
+    private Button uploadImage_View;
+
     Image image;
 
     private Connection connect;
@@ -235,6 +265,52 @@
     private Statement statement;
     private String comboBox[] = {"Male", "Female", "Others"};
 
+    public void addBook() {
+
+        String sql = "INSERT INTO book(bookTitle, author, bookType, image, date) " +
+                     "VALUES ('?','?','?','?','?')";
+
+        try {
+
+        } catch(SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void updateBook() {
+        try {
+
+            if(rs.next()) {
+                pst = conn.prepareStatement("UPDATE books SET Title = ?, Author = ?, Genre = ?, Date = ?, Publisher = ?");
+                pst.setString(1, title);
+                pst.setString(2, author);
+                pst.setString(3, genre);
+                pst.setString(4, date);
+                pst.setString(5, publisher);
+                pst.executeUpdate();
+                System.out.println("Update Book Successfully!");
+            }else {
+                System.out.println("No Book Found!");
+            }
+        }catch(SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void deleteBook() {
+        try {
+            if(rs.next()) {
+                pst = conn.prepareStatement("DELETE FROM books");
+                pst.executeUpdate();
+                System.out.println("Delete Book Successfully!");
+            }else {
+                System.out.println("No Book Found!");
+            }
+        }catch(SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
     public void gender(){
         List<String> combo = new ArrayList<>();
 
@@ -648,6 +724,7 @@
 
             while (result.next()){
                 aBooks = new availableBooks(
+                        result.getInt("book_id"),
                         result.getString("bookTitle"),
                         result.getString("author"),
                         result.getString("bookType"),
@@ -666,6 +743,7 @@
 
         listBook = dataList();
 
+        col_ab_BookId.setCellValueFactory(new PropertyValueFactory<>("id"));
         col_ab_bookTitle.setCellValueFactory(new PropertyValueFactory<>("title"));
         col_ab_author.setCellValueFactory(new PropertyValueFactory<>("author"));
         col_ab_bookType.setCellValueFactory(new PropertyValueFactory<>("genre"));
Index: src/main/java/librarymanagement/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package librarymanagement;\r\n\r\n\r\nimport java.sql.*;\r\n\r\npublic class Database {\r\n\r\n    private static Connection connect;\r\n    private static PreparedStatement prepare;\r\n\r\n    public static Connection connectDB() {\r\n        try {\r\n            String url = \"jdbc:mysql://localhost:3306\"; // Include the database name\r\n            String username = \"root\";\r\n            String password = \"\";\r\n\r\n            connect = DriverManager.getConnection(url, username, password);\r\n\r\n            // Create the database if it doesn't exist\r\n            String createDatabaseQuery = \"CREATE DATABASE IF NOT EXISTS librarydb\";\r\n            PreparedStatement createDatabaseStatement = connect.prepareStatement(createDatabaseQuery);\r\n            createDatabaseStatement.executeUpdate();\r\n\r\n            url += \"/librarydb\";\r\n            connect = DriverManager.getConnection(url, username, password);\r\n\r\n            // Create the table if it doesn't exist\r\n            String createStudentTableQuery = \"CREATE TABLE IF NOT EXISTS student (\"\r\n                    + \"studentNumber VARCHAR(100), \"\r\n                    + \"studentName NVARCHAR(100),\"\r\n                    + \"password VARCHAR(100))\";\r\n            prepare = connect.prepareStatement(createStudentTableQuery);\r\n            prepare.executeUpdate();\r\n\r\n            String createBookTableQuery = \"CREATE TABLE IF NOT EXISTS book (\"\r\n                    + \"bookTitle VARCHAR(100), \"\r\n                    + \"author VARCHAR(100), \"\r\n                    + \"bookType VARCHAR(100), \"\r\n                    + \"image VARCHAR(500), \"\r\n                    + \"date DATE NULL)\";\r\n            prepare = connect.prepareStatement(createBookTableQuery);\r\n            prepare.executeUpdate();\r\n\r\n            String createTakeBookTableQuery = \"CREATE TABLE IF NOT EXISTS take (\" +\r\n                    \"  studentNumber varchar(100),\" +\r\n                    \"  firstname varchar(100),\" +\r\n                    \"  lastname varchar(100),\" +\r\n                    \"  gender varchar(100),\" +\r\n                    \"  bookTitle varchar(100),\" +\r\n                    \"  author varchar(100),\" +\r\n                    \"  bookType varchar(100),\" +\r\n                    \"  image varchar(500),\" +\r\n                    \"  date date,\" +\r\n                    \"  checkReturn varchar(100)\" +\r\n                    \")\";\r\n            prepare = connect.prepareStatement(createTakeBookTableQuery);\r\n            prepare.executeUpdate();\r\n\r\n            String createSaveBookTableQuery = \"CREATE TABLE IF NOT EXISTS save (\" +\r\n                    \"  studentNumber varchar(100),\" +\r\n                    \"  bookTitle varchar(100),\" +\r\n                    \"  author varchar(100),\" +\r\n                    \"  bookType varchar(100),\" +\r\n                    \"  image varchar(500),\" +\r\n                    \"  date date\" +\r\n                    \")\" ;\r\n            prepare = connect.prepareStatement(createSaveBookTableQuery);\r\n            prepare.executeUpdate();\r\n\r\n            String createNewStudentTableQuery = \"CREATE TABLE IF NOT EXISTS newStudent (\"\r\n                    + \"id INT AUTO_INCREMENT PRIMARY KEY,\"\r\n                    + \"studentNumber VARCHAR(100), \"\r\n                    + \"studentName NVARCHAR(100),\"\r\n                    + \"password VARCHAR(100))\";\r\n            prepare = connect.prepareStatement(createNewStudentTableQuery);\r\n            prepare.executeUpdate();\r\n\r\n\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return connect;\r\n    }\r\n\r\n    public static void insertStudents() {\r\n        String sql = \"INSERT INTO student (studentNumber, studentName, password) VALUES (?, ?, ?)\";\r\n        try {\r\n            prepare = connect.prepareStatement(sql);\r\n\r\n            // Insert values for each student only if they don't already exist\r\n            if (!studentExists(Database.connect, \"0969571699\")) {\r\n                prepare.setString(1, \"0969571699\");\r\n                prepare.setString(2, \"Giang Khánh Quân\");\r\n                prepare.setString(3, \"123456\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            if (!studentExists(Database.connect, \"123\")) {\r\n                prepare.setString(1, \"123\");\r\n                prepare.setString(2, \"Nguyễn Phúc Toàn\");\r\n                prepare.setString(3, \"123456\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            if (!studentExists(Database.connect, \"456\")) {\r\n                prepare.setString(1, \"456\");\r\n                prepare.setString(2, \"Nguyễn Anh Đức\");\r\n                prepare.setString(3, \"123456\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            if (!studentExists(Database.connect, \"789\")) {\r\n                prepare.setString(1, \"789\");\r\n                prepare.setString(2, \"Nguyễn Hoàng Long\");\r\n                prepare.setString(3, \"123456\");\r\n                prepare.addBatch();\r\n            }\r\n            // Execute the batch insert\r\n            prepare.executeBatch();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void insertNewStudents() {\r\n        String sql = \"INSERT INTO student (id, studentName, studentNumber, password) VALUES (?, ?, ?,)\";\r\n        try {\r\n            prepare = connect.prepareStatement(sql);\r\n\r\n            // Insert values for each student only if they don't already exist\r\n            if (!studentExists(Database.connect, \"0969571699\")) {\r\n                prepare.setString(1, \"0969571699\");\r\n                prepare.setString(2, \"Giang Khánh Quân\");\r\n                prepare.setString(3, \"123456\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            // Execute the batch insert\r\n            prepare.executeBatch();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void insertBooks() throws SQLException{\r\n        String sql = \"INSERT INTO book (bookTitle, author, bookType, image, date) VALUES(?,?,?,?,?)\";\r\n\r\n        try{\r\n            prepare= connect.prepareStatement(sql);\r\n\r\n            //INSERT BOOKS WHEN THEY ONLY DONT EXIST\r\n            if (!bookExists(Database.connect, \"Java Tutorial\")) {\r\n                prepare.setString(1, \"Java Tutorial\");\r\n                prepare.setString(2, \"March\");\r\n                prepare.setString(3, \"Thesis, Education, IT\");\r\n                prepare.setString(4, \"src/main/java/image/java tutorial.jpg\");\r\n                prepare.setString(5, \"2020-09-24\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            if (!bookExists(Database.connect, \"JavaFX Tutorial\")) {\r\n                prepare.setString(1, \"JavaFX Tutorial\");\r\n                prepare.setString(2, \"Steven\");\r\n                prepare.setString(3, \"Journal, Education, IT\");\r\n                prepare.setString(4, \"src/main/java/image/javafx tutorial book.jpg\");\r\n                prepare.setString(5, \"2023-06-27\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            if (!bookExists(Database.connect, \"Programming Language\")) {\r\n                prepare.setString(1, \"Programming Language\");\r\n                prepare.setString(2, \"Ammy Adam\");\r\n                prepare.setString(3, \"Note, Education, Tutorial, IT\");\r\n                prepare.setString(4, \"src/main/java/image/programming language book.jpg\");\r\n                prepare.setString(5, \"2024-05-30\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            if (!bookExists(Database.connect, \"Python\")) {\r\n                prepare.setString(1, \"Python\");\r\n                prepare.setString(2, \"Army\");\r\n                prepare.setString(3, \"Magazine, Education, Introduction, Tutorial\");\r\n                prepare.setString(4, \"src/main/java/image/python tutorial.jpg\");\r\n                prepare.setString(5, \"2022-09-12\");\r\n                prepare.addBatch();\r\n            }\r\n\r\n            // Execute the batch insert\r\n            prepare.executeBatch();\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        } finally {\r\n            if(prepare != null)\r\n                prepare.close();\r\n            if(connect != null)\r\n                connect.close();\r\n        }\r\n    }\r\n\r\n    private static boolean studentExists(Connection connection, String studentNumber) throws SQLException {\r\n        String sql = \"SELECT COUNT(*) FROM student WHERE studentNumber = ?\";\r\n        PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n        preparedStatement.setString(1, studentNumber);\r\n        ResultSet resultSet = preparedStatement.executeQuery();\r\n        resultSet.next();\r\n        return resultSet.getInt(1) > 0;\r\n    }\r\n\r\n    private static boolean bookExists(Connection connection, String bookTitle) throws SQLException {\r\n        String sql = \"SELECT COUNT(*) FROM book WHERE bookTitle = ?\";\r\n        PreparedStatement preparedStatement = connection.prepareStatement(sql);\r\n        preparedStatement.setString(1, bookTitle);\r\n        ResultSet resultSet = preparedStatement.executeQuery();\r\n        resultSet.next();\r\n        return resultSet.getInt(1) > 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/librarymanagement/Database.java b/src/main/java/librarymanagement/Database.java
--- a/src/main/java/librarymanagement/Database.java	
+++ b/src/main/java/librarymanagement/Database.java	
@@ -25,45 +25,56 @@
             connect = DriverManager.getConnection(url, username, password);
 
             // Create the table if it doesn't exist
-            String createStudentTableQuery = "CREATE TABLE IF NOT EXISTS student ("
-                    + "studentNumber VARCHAR(100), "
-                    + "studentName NVARCHAR(100),"
-                    + "password VARCHAR(100))";
+            String createStudentTableQuery = "CREATE TABLE IF NOT EXISTS student (" +
+                    "`student_id` int(100) NOT NULL AUTO_INCREMENT," +
+                    "  `studentNumber` varchar(100) DEFAULT NULL," +
+                    "  `studentName` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL," +
+                    "  `dateOfBirth` date DEFAULT NULL," +
+                    "  `gender` varchar(10) DEFAULT NULL," +
+                    "  `phone` varchar(10) DEFAULT NULL," +
+                    "  `email` varchar(50) DEFAULT NULL," +
+                    "  `password` varchar(100) DEFAULT NULL," +
+                    "  PRIMARY KEY (`student_id`))";
             prepare = connect.prepareStatement(createStudentTableQuery);
             prepare.executeUpdate();
 
-            String createBookTableQuery = "CREATE TABLE IF NOT EXISTS book ("
-                    + "bookTitle VARCHAR(100), "
-                    + "author VARCHAR(100), "
-                    + "bookType VARCHAR(100), "
-                    + "image VARCHAR(500), "
-                    + "date DATE NULL)";
+            String createBookTableQuery = "CREATE TABLE IF NOT EXISTS book (" +
+                    "`book_id` int(100) NOT NULL AUTO_INCREMENT," +
+                    "  `bookNumber` varchar(100) DEFAULT NULL," +
+                    "  `bookTitle` varchar(100) DEFAULT NULL," +
+                    "  `author` varchar(100) DEFAULT NULL," +
+                    "  `bookType` varchar(100) DEFAULT NULL," +
+                    "  `image` varchar(500) DEFAULT NULL," +
+                    "  `date` date DEFAULT NULL," +
+                    "  PRIMARY KEY (`book_id`))";
             prepare = connect.prepareStatement(createBookTableQuery);
             prepare.executeUpdate();
 
             String createTakeBookTableQuery = "CREATE TABLE IF NOT EXISTS take (" +
-                    "  studentNumber varchar(100)," +
-                    "  firstname varchar(100)," +
-                    "  lastname varchar(100)," +
-                    "  gender varchar(100)," +
-                    "  bookTitle varchar(100)," +
-                    "  author varchar(100)," +
-                    "  bookType varchar(100)," +
-                    "  image varchar(500)," +
-                    "  date date," +
-                    "  checkReturn varchar(100)" +
-                    ")";
+                    "`id` int(100) NOT NULL AUTO_INCREMENT," +
+                    "  `studentNumber` varchar(100) DEFAULT NULL," +
+                    "  `firstname` varchar(100) DEFAULT NULL," +
+                    "  `lastname` varchar(100) DEFAULT NULL," +
+                    "  `gender` varchar(100) DEFAULT NULL," +
+                    "  `bookTitle` varchar(100) DEFAULT NULL," +
+                    "  `author` varchar(100) NOT NULL," +
+                    "  `bookType` varchar(100) NOT NULL," +
+                    "  `image` varchar(500) DEFAULT NULL," +
+                    "  `date` date DEFAULT NULL," +
+                    "  `checkReturn` varchar(100) DEFAULT NULL," +
+                    "  PRIMARY KEY (`id`))";
             prepare = connect.prepareStatement(createTakeBookTableQuery);
             prepare.executeUpdate();
 
             String createSaveBookTableQuery = "CREATE TABLE IF NOT EXISTS save (" +
-                    "  studentNumber varchar(100)," +
-                    "  bookTitle varchar(100)," +
-                    "  author varchar(100)," +
-                    "  bookType varchar(100)," +
-                    "  image varchar(500)," +
-                    "  date date" +
-                    ")" ;
+                    "`id` int(100) NOT NULL AUTO_INCREMENT," +
+                    "  `studentNumber` varchar(100) DEFAULT NULL," +
+                    "  `bookTitle` varchar(100) DEFAULT NULL," +
+                    "  `author` varchar(100) DEFAULT NULL," +
+                    "  `bookType` varchar(100) DEFAULT NULL," +
+                    "  `image` varchar(500) DEFAULT NULL," +
+                    "  `date` date DEFAULT NULL," +
+                    "  PRIMARY KEY (`id`))" ;
             prepare = connect.prepareStatement(createSaveBookTableQuery);
             prepare.executeUpdate();
 
@@ -83,7 +94,7 @@
     }
 
     public static void insertStudents() {
-        String sql = "INSERT INTO student (studentNumber, studentName, password) VALUES (?, ?, ?)";
+        String sql = "INSERT INTO student (studentNumber, studentName, password, dateOfBirth) VALUES (?, ?, ?, ?fff)";
         try {
             prepare = connect.prepareStatement(sql);
 
@@ -92,6 +103,7 @@
                 prepare.setString(1, "0969571699");
                 prepare.setString(2, "Giang Khánh Quân");
                 prepare.setString(3, "123456");
+                prepare.setString(4, "1999-10-05");
                 prepare.addBatch();
             }
 
@@ -99,6 +111,7 @@
                 prepare.setString(1, "123");
                 prepare.setString(2, "Nguyễn Phúc Toàn");
                 prepare.setString(3, "123456");
+                prepare.setString(4, "2003-01-12");
                 prepare.addBatch();
             }
 
@@ -106,6 +119,7 @@
                 prepare.setString(1, "456");
                 prepare.setString(2, "Nguyễn Anh Đức");
                 prepare.setString(3, "123456");
+                prepare.setString(4, "2002-09-05");
                 prepare.addBatch();
             }
 
@@ -113,6 +127,7 @@
                 prepare.setString(1, "789");
                 prepare.setString(2, "Nguyễn Hoàng Long");
                 prepare.setString(3, "123456");
+                prepare.setString(4, "2000-03-20");
                 prepare.addBatch();
             }
             // Execute the batch insert
@@ -124,7 +139,7 @@
     }
 
     public static void insertNewStudents() {
-        String sql = "INSERT INTO student (id, studentName, studentNumber, password) VALUES (?, ?, ?,)";
+        String sql = "INSERT INTO student (id, studentName, studentNumber, password) VALUES (?, ?, ?,?)";
         try {
             prepare = connect.prepareStatement(sql);
 
@@ -150,7 +165,6 @@
         try{
             prepare= connect.prepareStatement(sql);
 
-            //INSERT BOOKS WHEN THEY ONLY DONT EXIST
             if (!bookExists(Database.connect, "Java Tutorial")) {
                 prepare.setString(1, "Java Tutorial");
                 prepare.setString(2, "March");
Index: src/main/java/librarymanagement/availableBooks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package librarymanagement;\r\n\r\nimport java.util.Date;\r\n\r\npublic class availableBooks {\r\n    private final String title;\r\n    private final String author;\r\n    private final String genre;\r\n    private final String image;\r\n    private final Date date;\r\n\r\n    public availableBooks(String title, String author, String genre, String image, Date date){\r\n        this.title = title;\r\n        this.author = author;\r\n        this.genre = genre;\r\n        this.image = image;\r\n        this.date = date;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public String getAuthor() {\r\n        return author;\r\n    }\r\n\r\n    public String getGenre() {\r\n        return genre;\r\n    }\r\n\r\n    public String getImage() {\r\n        return image;\r\n    }\r\n\r\n    public Date getDate() {\r\n        return date;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/librarymanagement/availableBooks.java b/src/main/java/librarymanagement/availableBooks.java
--- a/src/main/java/librarymanagement/availableBooks.java	
+++ b/src/main/java/librarymanagement/availableBooks.java	
@@ -3,13 +3,15 @@
 import java.util.Date;
 
 public class availableBooks {
+    private final int id;
     private final String title;
     private final String author;
     private final String genre;
     private final String image;
     private final Date date;
 
-    public availableBooks(String title, String author, String genre, String image, Date date){
+    public availableBooks(int id ,String title, String author, String genre, String image, Date date){
+        this.id = id;
         this.title = title;
         this.author = author;
         this.genre = genre;
@@ -17,6 +19,10 @@
         this.date = date;
     }
 
+    public int getId() {
+        return id;
+    }
+
     public String getTitle() {
         return title;
     }
Index: src/main/java/librarymanagement/LibraryManagement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package librarymanagement;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\n\r\npublic class LibraryManagement extends Application  {\r\n\r\n    private double x = 0;\r\n    private double y = 0;\r\n    private Connection connect;\r\n\r\n    @Override\r\n    public void start(Stage stage) throws IOException, SQLException {\r\n        // Connect to the database\r\n        connect = Database.connectDB();\r\n\r\n        // Insert students into the database\r\n        Database.insertStudents();\r\n        Database. insertBooks();\r\n        Parent root = FXMLLoader.load(getClass().getResource(\"FXMLDocument.fxml\"));\r\n        Scene scene = new Scene(root);\r\n        root.setOnMousePressed((MouseEvent event) -> {\r\n            x = event.getSceneX();\r\n            y = event.getSceneY();\r\n        });\r\n\r\n        root.setOnMouseDragged((MouseEvent event) ->{\r\n            stage.setX(event.getScreenX() - x);\r\n            stage.setY(event.getScreenY() - y);\r\n\r\n        });\r\n        stage.initStyle(StageStyle.TRANSPARENT);\r\n\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/librarymanagement/LibraryManagement.java b/src/main/java/librarymanagement/LibraryManagement.java
--- a/src/main/java/librarymanagement/LibraryManagement.java	
+++ b/src/main/java/librarymanagement/LibraryManagement.java	
@@ -25,7 +25,7 @@
 
         // Insert students into the database
         Database.insertStudents();
-        Database. insertBooks();
+        Database.insertBooks();
         Parent root = FXMLLoader.load(getClass().getResource("FXMLDocument.fxml"));
         Scene scene = new Scene(root);
         root.setOnMousePressed((MouseEvent event) -> {
Index: src/main/java/librarymanagement/NewStudentDashboardController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package librarymanagement;\r\n\r\nimport de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;\r\nimport javafx.animation.TranslateTransition;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.paint.ImagePattern;\r\nimport javafx.scene.shape.Circle;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\nimport javafx.util.Duration;\r\n\r\nimport java.net.URL;\r\nimport java.sql.*;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class NewStudentDashboardController implements Initializable\r\n{\r\n    @FXML\r\n    private Button availableBooks_btn;\r\n\r\n    @FXML\r\n    private AnchorPane availableBooks_form;\r\n\r\n    @FXML\r\n    private ImageView availableBooks_imageView;\r\n\r\n    @FXML\r\n    private TableView<availableBooks> availableBooks_tableView;\r\n\r\n    @FXML\r\n    private Label availableBooks_title;\r\n\r\n    @FXML\r\n    private Circle circle_image;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_author;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_bookType;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_bookTitle;\r\n\r\n    @FXML\r\n    private TableColumn<availableBooks, String> col_ab_publishedDate;\r\n\r\n    @FXML\r\n    private Button edit_btn;\r\n\r\n    @FXML\r\n    private Button issueBooks_btn;\r\n\r\n    @FXML\r\n    private Button returnBooks_btn;\r\n\r\n    @FXML\r\n    private Button save_btn;\r\n\r\n    @FXML\r\n    private Button savedBooks_btn;\r\n\r\n    @FXML\r\n    private Button logout_btn;\r\n\r\n    @FXML\r\n    private Label studentNumber_label;\r\n\r\n    @FXML\r\n    private Button take_btn;\r\n\r\n    @FXML\r\n    private FontAwesomeIcon edit_icon;\r\n\r\n    @FXML\r\n    private Button close;\r\n\r\n    @FXML\r\n    private Button minimize;\r\n\r\n    @FXML\r\n    private Button bars_btn;\r\n\r\n    @FXML\r\n    private Button arrow_btn;\r\n\r\n    @FXML\r\n    private AnchorPane nav_form;\r\n\r\n    @FXML\r\n    private AnchorPane mainCenter_form;\r\n\r\n    @FXML\r\n    private Button halfNav_availableBtn;\r\n\r\n    @FXML\r\n    private AnchorPane halfNav_form;\r\n\r\n    @FXML\r\n    private Button halfNav_returnBtn;\r\n\r\n    @FXML\r\n    private Button halfNav_saveBtn;\r\n\r\n    @FXML\r\n    private Button halfNav_takeBtn;\r\n\r\n    @FXML\r\n    private Circle smallCircle_image;\r\n\r\n    @FXML\r\n    private AnchorPane issue_form;\r\n\r\n    @FXML\r\n    private AnchorPane returnBook_form;\r\n\r\n    @FXML\r\n    private AnchorPane savedBook_form;\r\n\r\n    @FXML\r\n    private Label currentForm_label;\r\n\r\n    @FXML\r\n    private TextField take_BookTitle;\r\n\r\n    @FXML\r\n    private TextField take_FirstName;\r\n\r\n    @FXML\r\n    private ComboBox<?> take_Gender;\r\n\r\n    @FXML\r\n    private Label take_IssuedDate;\r\n\r\n    @FXML\r\n    private TextField take_LastName;\r\n\r\n    @FXML\r\n    private Label take_StudentNumber;\r\n\r\n    @FXML\r\n    private Label take_authorLabel;\r\n\r\n    @FXML\r\n    private Button take_clearBtn;\r\n\r\n    @FXML\r\n    private Label take_dateLabel;\r\n\r\n    @FXML\r\n    private Label take_genreLabel;\r\n\r\n    @FXML\r\n    private ImageView take_imageView;\r\n\r\n    @FXML\r\n    private Button take_takeBtn;\r\n\r\n    @FXML\r\n    private Label take_titleLabel;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_author;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_date;\r\n\r\n    @FXML\r\n    private ImageView return_imageView;\r\n\r\n    @FXML\r\n    private TableView<returnBook> return_tableView;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_title;\r\n\r\n    @FXML\r\n    private TableColumn<returnBook, String> returnBook_type;\r\n\r\n    @FXML\r\n    private Button return_button;\r\n    @FXML\r\n    private TableColumn<saveBook, String> saveBook_author;\r\n\r\n    @FXML\r\n    private TableColumn<saveBook, String> saveBook_date;\r\n\r\n    @FXML\r\n    private TableColumn<saveBook, String> saveBook_title;\r\n\r\n    @FXML\r\n    private TableColumn<saveBook, String > saveBook_type;\r\n\r\n    @FXML\r\n    private Button unsave_btn;\r\n\r\n    @FXML\r\n    private ImageView save_imageView;\r\n\r\n    @FXML\r\n    private TableView<saveBook> saveBook_tableView;\r\n\r\n    Image image;\r\n\r\n    private Connection connect;\r\n    private PreparedStatement prepare;\r\n    private ResultSet result;\r\n    private Statement statement;\r\n    private String comboBox[] = {\"Male\", \"Female\", \"Others\"};\r\n\r\n    public void gender(){\r\n        List<String> combo = new ArrayList<>();\r\n\r\n        for(String data: comboBox){\r\n            combo.add(data);\r\n        }\r\n\r\n        ObservableList list = FXCollections.observableList(combo);\r\n\r\n        take_Gender.setItems(list);\r\n    }\r\n\r\n    public void takeBook() throws SQLException {\r\n\r\n        java.util.Date date = new java.util.Date();\r\n        java.sql.Date sqlDate = new java.sql.Date(date.getTime());\r\n\r\n        String sql = \"INSERT INTO take VALUES(?,?,?,?,?,?,?,?,?,?)\";\r\n\r\n        connect = Database.connectDB();\r\n\r\n        try{\r\n\r\n            Alert alert;\r\n\r\n            if(take_FirstName.getText().isEmpty()\r\n                    || take_LastName.getText().isEmpty()\r\n                    || take_Gender.getSelectionModel().isEmpty()){\r\n                alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please insert completely all Student's Information!\");\r\n                alert.showAndWait();\r\n            }else if(take_titleLabel.getText().isEmpty()){\r\n                alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please indicate the book you want to take\");\r\n                alert.showAndWait();\r\n            }else if(take_titleLabel.getText().equals(\"Book is not available!\")) {\r\n                alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"The selected book is not available. Please select another book.\");\r\n                alert.showAndWait();\r\n            }\r\n            else{\r\n\r\n                prepare = connect.prepareStatement(sql);\r\n                prepare.setString(1, take_StudentNumber.getText());\r\n                prepare.setString(2, take_FirstName.getText());\r\n                prepare.setString(3, take_LastName.getText());\r\n                prepare.setString(4, (String)take_Gender.getSelectionModel().getSelectedItem());\r\n                prepare.setString(5, take_titleLabel.getText());\r\n                prepare.setString(6, take_authorLabel.getText());\r\n                prepare.setString(7, take_genreLabel.getText());\r\n                prepare.setString(8, getData.path);\r\n                prepare.setDate(9, sqlDate);\r\n\r\n                String check = \"Not Return\";\r\n\r\n                prepare.setString(10, check);\r\n                prepare.executeUpdate();\r\n\r\n                alert = new Alert(Alert.AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Successfully take the book\");\r\n                alert.showAndWait();\r\n\r\n                clearTakeData();\r\n\r\n            }\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        } finally {\r\n            if(result != null)\r\n                result.close();\r\n            if(prepare != null)\r\n                prepare.close();\r\n            if(connect != null)\r\n                connect.close();\r\n        }\r\n    }\r\n\r\n    public void findBook(ActionEvent event) throws SQLException {\r\n\r\n        clearFindData();\r\n\r\n        String sql = \"SELECT * FROM book WHERE bookTitle = '\" + take_BookTitle.getText() + \"'\";\r\n\r\n        connect = Database.connectDB();\r\n\r\n        try{\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n            boolean check = false;\r\n\r\n            Alert alert;\r\n\r\n            if(take_BookTitle.getText().isEmpty()){\r\n                alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book!\");\r\n                alert.showAndWait();\r\n            }else{\r\n                while (result.next()){\r\n                    take_titleLabel.setText(result.getString(\"bookTitle\"));\r\n                    take_authorLabel.setText(result.getString(\"author\"));\r\n                    take_genreLabel.setText(result.getString(\"bookType\"));\r\n                    take_dateLabel.setText(result.getString(\"date\"));\r\n\r\n                    getData.path = result.getString(\"image\");\r\n\r\n                    String uri = \"file:\" + getData.path;\r\n\r\n                    image = new Image(uri, 127,162, false, true);\r\n                    take_imageView.setImage(image);\r\n\r\n                    check = true;\r\n                }\r\n\r\n                if(!check){\r\n                    take_titleLabel.setText(\"Book is not available!\");\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        } finally {\r\n            if(result != null)\r\n                result.close();\r\n            if(prepare != null)\r\n                prepare.close();\r\n            if(connect != null)\r\n                connect.close();\r\n        }\r\n    }\r\n\r\n    public void studentNumberLabel(){\r\n        take_StudentNumber.setText(getData.studentNumber);\r\n    }\r\n\r\n    public void clearTakeData(){\r\n        take_BookTitle.setText(\"\");\r\n        take_titleLabel.setText(\"\");\r\n        take_authorLabel.setText(\"\");\r\n        take_genreLabel.setText(\"\");\r\n        take_dateLabel.setText(\"\");\r\n        take_imageView.setImage(null);\r\n    }\r\n\r\n    public void clearFindData(){\r\n        take_titleLabel.setText(\"\");\r\n        take_authorLabel.setText(\"\");\r\n        take_genreLabel.setText(\"\");\r\n        take_dateLabel.setText(\"\");\r\n        take_imageView.setImage(null);\r\n    }\r\n\r\n    public void displayDate(){\r\n        SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n        String date = format.format(new java.util.Date());\r\n        take_IssuedDate.setText(date);\r\n    }\r\n\r\n    //Return book\r\n\r\n    public ObservableList<returnBook> returnBookData(){\r\n        ObservableList<returnBook> listReturnBook = FXCollections.observableArrayList();\r\n        String checkReturn = \"Not Return\";\r\n        String sql = \"SELECT * FROM take WHERE checkReturn = '\"+ checkReturn +\"' AND studentNumber = '\"+ getData.studentNumber +\"' \";\r\n        Alert alert;\r\n        connect = Database.connectDB();\r\n        try{\r\n            returnBook rBooks;\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n            while (result.next()){\r\n                rBooks = new returnBook(\r\n                        result.getString(\"bookTitle\"),\r\n                        result.getString(\"author\"),\r\n                        result.getString(\"bookType\"),\r\n                        result.getDate(\"date\"),\r\n                        result.getString(\"image\")\r\n\r\n                );\r\n\r\n                listReturnBook.add(rBooks);\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return listReturnBook;\r\n    }\r\n\r\n    public void returnBook(){\r\n        String sql = \"UPDATE take SET checkReturn = 'Returned' WHERE bookTitle = '\"+ getData.takeBookTitle +\"' \";\r\n        connect = Database.connectDB();\r\n\r\n        try{\r\n\r\n            if(return_imageView.getImage() == null){\r\n                Alert alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book you want to return!\");\r\n                alert.showAndWait();\r\n            }else{\r\n                statement = connect.createStatement();\r\n                statement.executeUpdate(sql);\r\n                Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Return successfully!\");\r\n                alert.showAndWait();\r\n\r\n                showReturnBooks();\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void selectReturnBook(){\r\n        returnBook rBooks = return_tableView.getSelectionModel().getSelectedItem();\r\n        int num = return_tableView.getSelectionModel().getFocusedIndex();\r\n\r\n        if ((num - 1) < -1) {\r\n//            Alert alert = new Alert(AlertType.INFORMATION);\r\n//            alert.setTitle(\"Program message\");\r\n//            alert.setHeaderText(null);\r\n//            alert.setContentText(\"\"+ num +\"\");\r\n//            alert.showAndWait();\r\n            return;\r\n        }\r\n\r\n        getData.takeBookTitle = rBooks.getTitle();\r\n\r\n        getData.path = rBooks.getImage();\r\n\r\n        String uri = \"file:\" + getData.path;\r\n\r\n        image = new Image(uri, 134,171, false, true);\r\n        return_imageView.setImage(image);\r\n\r\n    }\r\n\r\n    private ObservableList<returnBook> returnData;\r\n    public void showReturnBooks(){\r\n        returnData = returnBookData();\r\n\r\n        returnBook_title.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        returnBook_author.setCellValueFactory(new PropertyValueFactory<>(\"author\"));\r\n        returnBook_type.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        returnBook_date.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n\r\n        return_tableView.setItems(returnData);\r\n\r\n    }\r\n    //Save book\r\n\r\n    public  ObservableList<saveBook> saveBookData(){\r\n        ObservableList<saveBook> listSaveData = FXCollections.observableArrayList();\r\n        String sql = \"Select * from save where studentNumber = '\"+ getData.studentNumber +\"' \";\r\n        //int count =0;\r\n        connect = Database.connectDB();\r\n        try {\r\n            saveBook sBooks;\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n            while(result.next()){\r\n                sBooks = new saveBook(result.getString(\"bookTitle\"),result.getString(\"author\"),\r\n                        result.getString(\"bookType\"),result.getString(\"image\"),\r\n                        result.getDate(\"date\"));\r\n                listSaveData.add(sBooks);\r\n                //count ++;\r\n            }\r\n//        Alert alert = new Alert(AlertType.INFORMATION);\r\n//        alert.setTitle(\"Program message\");\r\n//        alert.setHeaderText(null);\r\n//        alert.setContentText(\"\"+ count +\"\");\r\n//        alert.showAndWait();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return listSaveData;\r\n    }\r\n\r\n    private ObservableList<saveBook> sBookList;\r\n    public void showSaveBook(){\r\n        sBookList = saveBookData();\r\n        int count =0;\r\n        saveBook_title.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        saveBook_author.setCellValueFactory(new PropertyValueFactory<>(\"author\"));\r\n        saveBook_type.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        saveBook_date.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n\r\n        saveBook_tableView.setItems(sBookList);\r\n    }\r\n\r\n    public void saveBook(){\r\n        String sql = \"INSERT INTO save VALUES(?,?,?,?,?,?)\";\r\n        connect = Database.connectDB();\r\n\r\n        try {\r\n\r\n            Alert alert;\r\n            if(availableBooks_title.getText().isEmpty()){\r\n                alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book!\");\r\n                alert.showAndWait();\r\n            }\r\n            else{\r\n                prepare = connect.prepareStatement(sql);\r\n                prepare.setString(1, getData.studentNumber);\r\n                prepare.setString(2, getData.saveTitle);\r\n                prepare.setString(3, getData.saveAuthor);\r\n                prepare.setString(4, getData.saveType);\r\n                prepare.setString(5, getData.saveImg);\r\n                prepare.setDate(6, getData.saveDate);\r\n                prepare.executeUpdate();\r\n\r\n                alert = new Alert(Alert.AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Book saved!\");\r\n                alert.showAndWait();\r\n\r\n                showSaveBook();\r\n            }\r\n\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void selectSaveBook(){\r\n        saveBook sBook = saveBook_tableView.getSelectionModel().getSelectedItem();\r\n        int num = saveBook_tableView.getSelectionModel().getFocusedIndex();\r\n\r\n        if ((num - 1) < -1) {\r\n            return;\r\n        }\r\n\r\n        getData.takeBookTitle = sBook.getTitle();\r\n\r\n        getData.path = sBook.getImg();\r\n\r\n        String uri = \"file:\" + getData.path;\r\n\r\n        image = new Image(uri, 108,147, false, true);\r\n        save_imageView.setImage(image);\r\n        getData.saveImg = sBook.getImg();\r\n        getData.saveTitle = sBook.getTitle();\r\n    }\r\n\r\n    public void unsaveBook(){\r\n        String sql = \"Delete from save where bookTitle = '\" + getData.saveTitle + \"' and studentNumber = '\" + getData.studentNumber + \"'\";\r\n\r\n        connect = Database.connectDB();\r\n        try {\r\n            Alert alert;\r\n\r\n            if(save_imageView.getImage() == null){\r\n                alert = new Alert(Alert.AlertType.ERROR);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Please select the book you want to unsave!\");\r\n                alert.showAndWait();\r\n            }else{\r\n                statement = connect.createStatement();\r\n                statement.executeUpdate(sql);\r\n                alert = new Alert(Alert.AlertType.INFORMATION);\r\n                alert.setTitle(\"Program message\");\r\n                alert.setHeaderText(null);\r\n                alert.setContentText(\"Unsave successfully!\");\r\n                alert.showAndWait();\r\n\r\n                showSaveBook();\r\n                save_imageView.setImage(null);\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public ObservableList<availableBooks> dataList(){\r\n\r\n        ObservableList<availableBooks> listBooks = FXCollections.observableArrayList();\r\n\r\n        String sql = \"SELECT * FROM book\";\r\n\r\n        connect = Database.connectDB();\r\n\r\n        try {\r\n            availableBooks aBooks;\r\n\r\n            prepare = connect.prepareStatement(sql);\r\n            result = prepare.executeQuery();\r\n\r\n            while (result.next()){\r\n                aBooks = new availableBooks(\r\n                        result.getString(\"bookTitle\"),\r\n                        result.getString(\"author\"),\r\n                        result.getString(\"bookType\"),\r\n                        result.getString(\"image\"),\r\n                        result.getDate(\"date\"));\r\n                listBooks.add(aBooks);\r\n            }\r\n\r\n        }catch (Exception e){e.printStackTrace();}\r\n        return listBooks;\r\n    }\r\n\r\n    //SHOWING BOOKS DATA\r\n    private ObservableList<availableBooks> listBook;\r\n    public void showAvailableBooks(){\r\n\r\n        listBook = dataList();\r\n\r\n        col_ab_bookTitle.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\r\n        col_ab_author.setCellValueFactory(new PropertyValueFactory<>(\"author\"));\r\n        col_ab_bookType.setCellValueFactory(new PropertyValueFactory<>(\"genre\"));\r\n        col_ab_publishedDate.setCellValueFactory(new PropertyValueFactory<>(\"date\"));\r\n\r\n        availableBooks_tableView.setItems(listBook);\r\n    }\r\n\r\n\r\n    public void selectAvailableBooks(){\r\n\r\n        availableBooks bookData = availableBooks_tableView.getSelectionModel().getSelectedItem();\r\n\r\n        int num = availableBooks_tableView.getSelectionModel().getFocusedIndex();\r\n\r\n        if ((num - 1) < -1) {\r\n            return;\r\n        }\r\n\r\n        availableBooks_title.setText(bookData.getTitle());\r\n\r\n//        THIS IS REQUIRED TO DISPLAY THE IMAGE\r\n//        NOTE! DON'T FORGET THE \"file:\"\r\n        String uri = \"file:\" + bookData.getImage();\r\n\r\n        image = new Image(uri, 134, 171, false, true);\r\n        availableBooks_imageView.setImage(image);\r\n\r\n        getData.takeBookTitle = bookData.getTitle();\r\n        getData.saveTitle = bookData.getTitle();\r\n        getData.saveAuthor = bookData.getAuthor();\r\n        getData.saveType = bookData.getGenre();\r\n        getData.saveImg = bookData.getImage();\r\n        getData.saveDate = (java.sql.Date) bookData.getDate();\r\n    }\r\n\r\n    public void abTakeButton(ActionEvent event){\r\n\r\n        if (event.getSource()== take_btn){\r\n            issue_form.setVisible(true);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n        }\r\n\r\n    }\r\n\r\n    public void studentNumber(){\r\n//        WE CAN DISPLAY THE STUDENT NUMBER THAT STUDENT USED\r\n        studentNumber_label.setText(getData.studentNumber);\r\n    }\r\n\r\n    public void hideInsertImage(){\r\n        edit_btn.setVisible(false);\r\n    }\r\n\r\n    public void setUserImage() {\r\n        String rootPath = System.getProperty(\"user.dir\");\r\n        String relativeImagePath = \"/src/main/java/image/logo.png\";\r\n        String absoluteImagePath = rootPath + relativeImagePath;\r\n\r\n        image = new Image(\"file:\" + absoluteImagePath, 130, 87, false, true);\r\n        circle_image.setFill(new ImagePattern(image));\r\n        smallCircle_image.setFill(new ImagePattern(image));\r\n    }\r\n\r\n    public void sideNavButtonDesign(ActionEvent event){\r\n        if (event.getSource() == halfNav_availableBtn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(true);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Available Books\");\r\n        }else if (event.getSource() == halfNav_takeBtn){\r\n\r\n            issue_form.setVisible(true);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Issue Books\");\r\n\r\n        }else if (event.getSource() == halfNav_returnBtn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(true);\r\n\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Return Books\");\r\n            showReturnBooks();\r\n\r\n        }else if (event.getSource() == halfNav_saveBtn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(true);\r\n            returnBook_form.setVisible(false);\r\n\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Saved Books\");\r\n            showSaveBook();\r\n        }\r\n    }\r\n\r\n    public void navButtonDesign(ActionEvent event){\r\n\r\n        if (event.getSource() == availableBooks_btn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(true);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Available Books\");\r\n\r\n        }else if (event.getSource() == issueBooks_btn){\r\n\r\n            issue_form.setVisible(true);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(false);\r\n\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Issue Books\");\r\n\r\n        }else if (event.getSource() == returnBooks_btn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(false);\r\n            returnBook_form.setVisible(true);\r\n\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Return Books\");\r\n\r\n            showReturnBooks();\r\n\r\n        }else if (event.getSource() == savedBooks_btn){\r\n\r\n            issue_form.setVisible(false);\r\n            availableBooks_form.setVisible(false);\r\n            savedBook_form.setVisible(true);\r\n            returnBook_form.setVisible(false);\r\n\r\n            savedBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            availableBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            issueBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            returnBooks_btn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            halfNav_saveBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\");\r\n            halfNav_takeBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_returnBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n            halfNav_availableBtn.setStyle(\"-fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\");\r\n\r\n            currentForm_label.setText(\"Saved Books\");\r\n\r\n            showSaveBook();\r\n        }\r\n    }\r\n\r\n    private double x = 0;\r\n    private double y = 0;\r\n\r\n    public void sliderArrow(){\r\n\r\n        TranslateTransition slide = new TranslateTransition();\r\n\r\n        slide.setDuration(Duration.seconds(.5));\r\n        slide.setNode(nav_form);\r\n        slide.setToX(-263);\r\n\r\n        TranslateTransition slide1 = new TranslateTransition();\r\n\r\n        slide1.setDuration(Duration.seconds(.5));\r\n        slide1.setNode(mainCenter_form);\r\n        slide1.setToX(-263 + 100);\r\n\r\n        TranslateTransition slide2 = new TranslateTransition();\r\n\r\n        slide2.setDuration(Duration.seconds(.5));\r\n        slide2.setNode(halfNav_form);\r\n        slide2.setToX(0);\r\n\r\n\r\n\r\n        slide.setOnFinished((ActionEvent event) -> {\r\n            arrow_btn.setVisible(false);\r\n            bars_btn.setVisible(true);\r\n        });\r\n\r\n        slide2.play();\r\n        slide1.play();\r\n        slide.play();\r\n    }\r\n\r\n    public void sliderBars(){\r\n        TranslateTransition slide = new TranslateTransition();\r\n\r\n        slide.setDuration(Duration.seconds(.5));\r\n        slide.setNode(nav_form);\r\n        slide.setToX(0);\r\n\r\n        TranslateTransition slide1 = new TranslateTransition();\r\n        slide1.setDuration(Duration.seconds(.5));\r\n        slide1.setNode(mainCenter_form);\r\n        slide1.setToX(0);\r\n\r\n        TranslateTransition slide2 = new TranslateTransition();\r\n\r\n        slide2.setDuration(Duration.seconds(.5));\r\n        slide2.setNode(halfNav_form);\r\n        slide2.setToX(-86);\r\n\r\n        slide.setOnFinished((ActionEvent event) -> {\r\n            arrow_btn.setVisible(true);\r\n            bars_btn.setVisible(false);\r\n        });\r\n\r\n        slide2.play();\r\n        slide1.play();\r\n        slide.play();\r\n    }\r\n\r\n    @FXML\r\n    public void logout(ActionEvent event){\r\n        try{\r\n            if(event.getSource() == logout_btn){\r\n                //To SWAP FROM DASHBOARD TO LOGIN FORM\r\n                Parent root = FXMLLoader.load(getClass().getResource(\"FXMLDocument.fxml\"));\r\n\r\n                Stage stage = new Stage();\r\n                Scene scene = new Scene(root);\r\n\r\n                root.setOnMousePressed((MouseEvent e) -> {\r\n\r\n                    x = e.getSceneX();\r\n                    y = e.getSceneY();\r\n\r\n                });\r\n\r\n                root.setOnMouseDragged((MouseEvent e) -> {\r\n                    stage.setX(e.getScreenX() - x);\r\n                    stage.setY(e.getScreenY() - y);\r\n                });\r\n\r\n                stage.initStyle(StageStyle.TRANSPARENT);\r\n\r\n                stage.setScene(scene);\r\n                stage.show();\r\n\r\n                logout_btn.getScene().getWindow().hide();\r\n\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public void exit(){\r\n        System.exit(0);\r\n    }\r\n\r\n    public void minimize(){\r\n        Stage stage = (Stage) minimize.getScene().getWindow();\r\n        stage.setIconified(true);\r\n    }\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        //TO SHOW THE AVAILABLE BOOKS\r\n        showAvailableBooks();\r\n        setUserImage();\r\n        hideInsertImage();\r\n        studentNumber();\r\n        gender();\r\n        studentNumberLabel();\r\n        displayDate();\r\n        try {\r\n            showSaveBook();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        try{\r\n            showReturnBooks();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n//    public void insertImage(){\r\n//\r\n//        FileChooser open = new FileChooser();\r\n//        open.setTitle(\"Image file\");\r\n//        open.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Image file\", \"*png\", \"*jpg\"));\r\n//        Stage stage = (Stage) nav_form.getScene().getWindow();\r\n//\r\n//        File file = open.showOpenDialog(stage);\r\n//\r\n//        if(file != null){\r\n//\r\n//            image = new Image(file.toURI().toString(),130,87,false,true);\r\n//            circle_image.setFill(new ImagePattern(image));\r\n//            smallCircle_image.setFill(new ImagePattern(image));\r\n//\r\n//            getData.path = file.getAbsolutePath();\r\n//            System.out.println(getData.path);\r\n//\r\n//            changeProfile();\r\n//        }\r\n//    }\r\n//\r\n//    public void changeProfile(){\r\n//\r\n//        String uri = getData.path;\r\n//        //uri.replace(\"\\\\\",\"\\\\\\\\\");\r\n//        String uri_convert = uri.replace(\"\\\\\",\"/\");\r\n//        String sql = \"Update student set image = '\"+ uri_convert +\"' where studentNumber = '\"+ getData.studentNumber +\"' \";\r\n//        connect = Database.connectDB();\r\n//        try {\r\n//\r\n//            statement = connect.createStatement();\r\n//            statement.executeUpdate(sql);\r\n//\r\n//        }catch (Exception e){\r\n//            e.printStackTrace();\r\n//        }\r\n//    }\r\n//\r\n//    public void showProfile(){\r\n//        String uri = \"file:\" + getData.path;\r\n//        image = new Image(uri, 130, 87, false, true);\r\n//        circle_image.setFill(new ImagePattern(image));\r\n//        smallCircle_image.setFill(new ImagePattern(image));\r\n//    }\r\n\r\n//    public void DesignInsertImage(){\r\n//        circle_image.setOnMouseEntered((MouseEvent event)->{\r\n//            edit_btn.setVisible(true);\r\n//        });\r\n//        circle_image.setOnMouseExited((MouseEvent event)->{\r\n//            edit_btn.setVisible(false);\r\n//        });\r\n//\r\n//        edit_btn.setOnMouseEntered((MouseEvent event)->{\r\n//            edit_btn.setVisible(true);\r\n//            edit_icon.setFill(Color.valueOf(\"#fff\"));\r\n//        });\r\n//        edit_btn.setOnMousePressed((MouseEvent event)->{\r\n//            edit_btn.setVisible(true);\r\n//            edit_icon.setFill(Color.RED);\r\n//        });\r\n//        edit_btn.setOnMouseExited((MouseEvent event)->{\r\n//            edit_btn.setVisible(false);\r\n//        });\r\n//\r\n//\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/librarymanagement/NewStudentDashboardController.java b/src/main/java/librarymanagement/NewStudentDashboardController.java
--- a/src/main/java/librarymanagement/NewStudentDashboardController.java	
+++ b/src/main/java/librarymanagement/NewStudentDashboardController.java	
@@ -49,6 +49,9 @@
     @FXML
     private Circle circle_image;
 
+    @FXML
+    private TableColumn<availableBooks, Integer> col_ab_BookId;
+
     @FXML
     private TableColumn<availableBooks, String> col_ab_author;
 
@@ -634,6 +637,7 @@
 
             while (result.next()){
                 aBooks = new availableBooks(
+                        result.getInt("book_id"),
                         result.getString("bookTitle"),
                         result.getString("author"),
                         result.getString("bookType"),
@@ -652,6 +656,7 @@
 
         listBook = dataList();
 
+        col_ab_BookId.setCellValueFactory(new PropertyValueFactory<>("id"));
         col_ab_bookTitle.setCellValueFactory(new PropertyValueFactory<>("title"));
         col_ab_author.setCellValueFactory(new PropertyValueFactory<>("author"));
         col_ab_bookType.setCellValueFactory(new PropertyValueFactory<>("genre"));
Index: src/main/resources/designDashboard.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.top-form{\r\n    -fx-background-color:#fff;\r\n    -fx-border-color:#000;\r\n    -fx-border-width: 0.2px 0.2px 0.5px 0.2px;\r\n}\r\n\r\n.semi-top {\r\n    -fx-border-color: #000;\r\n    -fx-border-width: 0px 0px 0.5px 0px;\r\n}\r\n.close-btn{\r\n    -fx-background-color: transparent;\r\n    -fx-cursor:hand;\r\n\r\n}\r\n\r\n.close-btn:hover{\r\n    -fx-background-color: #f13f57;\r\n}\r\n\r\n.minimize-btn{\r\n    -fx-background-color: transparent;\r\n    -fx-cursor: hand;\r\n}\r\n\r\n.minimize-btn:hover {\r\n    -fx-background-color:#dddddd;\r\n}\r\n\r\n.bars{\r\n    -fx-background-color: transparent;\r\n    -fx-background-radius: 5px;\r\n    -fx-cursor:hand;\r\n}\r\n\r\n.bars:hover {\r\n    -fx-background-color: #d6d6d6;\r\n}\r\n\r\n.nav-form{\r\n    -fx-background-color: linear-gradient(to bottom right, #252d50, #324f6b);\r\n}\r\n\r\n.edit-btn {\r\n    -fx-background-color: transparent;\r\n    -fx-cursor: hand;\r\n    -fx-padding:70px 0px 0px 0px;\r\n}\r\n\r\n.nav-btn {\r\n    -fx-background-color: linear-gradient(to bottom right, #344275, #3a6389);\r\n    -fx-background-radius: 10px;\r\n    -fx-font-size: 15px;\r\n    -fx-text-fill: #fff;\r\n    -fx-font-family: \"Microsoft Sans Serif\";\r\n    -fx-cursor: hand;\r\n}\r\n\r\n.nav-btn: hover {\r\n    -fx-background-color: linear-gradient(to bottom right, #46589a, #4278a7);\r\n    -fx-background-radius: 10px;\r\n    -fx-cursor: hand;\r\n}\r\n\r\n.logout-btn {\r\n    -fx-background-color: #366d9d;\r\n    -fx-background-radius: 10px;\r\n    -fx-cursor: hand;\r\n}\r\n\r\n.card-form {\r\n    -fx-background-color: #f8f8f8;\r\n    -fx-border-color: #454368;\r\n    -fx-border-radius:10px;\r\n    -fx-background-radius: 10px;\r\n}\r\n\r\n.image-card {\r\n    -fx-background-color: #fff;\r\n    -fx-border-color:#000;\r\n}\r\n\r\n.save-btn {\r\n    -fx-background-color: #558e74;\r\n    -fx-background-radius: 15px;\r\n    -fx-font-size: 15px;\r\n    -fx-cursor:hand;\r\n    -fx-text-fill: #fff;\r\n}\r\n\r\n.save-btn: hover {\r\n    -fx-background-color: #57b187\r\n}\r\n\r\n.take-btn {\r\n    -fx-background-color: #914f96;\r\n    -fx-background-radius: 15px;\r\n    -fx-cursor: hand;\r\n    -fx-font-size: 15px;\r\n    -fx-text-fill: #fff;\r\n}\r\n\r\n.take-btn: hover {\r\n    -fx-background-color: #b356bb;\r\n}\r\n\r\n.textfield_take {\r\n    -fx-background-color: #fff;\r\n    -fx-background-radius: 5px;\r\n    -fx-border-radius: 5px;\r\n    -fx-border-color: #000;\r\n    -fx-border-width: 0.4px;\r\n    -fx-font-size: 14px;\r\n}\r\n\r\n.textfield_take : focused {\r\n    -fx-border-width: 0.8px;\r\n}\r\n\r\n.label_take {\r\n    -fx-background-color: #fff;\r\n    -fx-padding: 0px 0px 0px 8px;\r\n    -fx-font-size: 14px;\r\n    -fx-border-color: #000;\r\n    -fx-border-radius: 5px;\r\n    -fx-border-width: 0.4px;\r\n    -fx-background-radius: 5px;\r\n}\r\n\r\n.clear-btn{\r\n    -fx-background-color:#376282;\r\n    -fx-background-radius: 15px;\r\n    -fx-text-fill: #fff;\r\n    -fx-font-size: 14px;\r\n    -fx-cursor: hand;\r\n}\r\n\r\n.clear-btn:hover{\r\n    -fx-background-color:#4386b5;\r\n}\r\n\r\n.return-btn{\r\n    -fx-background-color: #31647f;\r\n    -fx-background-radius: 15px;\r\n    -fx-cursor:hand;\r\n    -fx-text-fill: #fff;\r\n    -fx-font-size: 15px;\r\n}\r\n\r\n.return-btn:hover{\r\n    -fx-background-color: #3686ae;\r\n}\r\n.unsave_btn{\r\n    -fx-background-color: #c41616;\r\n    -fx-background-radius: 15px;\r\n    -fx-text-fill: #fff;\r\n    -fx-font-size:14px;\r\n    -fx-cursor: hand;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/designDashboard.css b/src/main/resources/designDashboard.css
--- a/src/main/resources/designDashboard.css	
+++ b/src/main/resources/designDashboard.css	
@@ -18,6 +18,15 @@
     -fx-background-color: #f13f57;
 }
 
+.maximize-btn{
+    -fx-background-color: transparent;
+    -fx-cursor: hand;
+}
+
+.maximize-btn:hover{
+    -fx-background-color: #dddddd;
+}
+
 .minimize-btn{
     -fx-background-color: transparent;
     -fx-cursor: hand;
